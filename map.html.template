<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor" crossorigin="anonymous">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Church Sites</title>
    <style>
      #map {
        width: 100%;
        height: 600px;
      }
    </style>
    <script id="churches">{{churches}}</script>
  </head>
  <body>
    <div class="container">
      <h1>Church Sites</h1>
      <div id="map"></div>
      <div class="row">
        <div class="col-12 mt-2 text-end">
          <select id="arrivalTime" onchange="onChooseArrivalTime()"></select>
        </div>
      </div>
      <table class="table">
        <thead>
          <tr>
            <th></th>
            <th class="text-center" colspan="4">Drive time (minutes)</th>
            <th class="text-center" colspan="4">&Delta; drive time (minutes)</th>
            <th></th>
            <th></th>
          </tr>
          <tr>
            <th>Address</th>
            <th class="text-end">Mean</th>
            <th class="text-end">50%</th>
            <th class="text-end">90%</th>
            <th class="text-end">95%</th>
            <th class="text-end">Mean</th>
            <th class="text-end">50%</th>
            <th class="text-end">90%</th>
            <th class="text-end">95%</th>
            <th class="text-end">Size</th>
            <th class="text-end">Price</th>
          </tr>
        </thead>
        <tbody id="churches-tbody">
        </tbody>
      </table>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js" integrity="sha384-pprn3073KE6tl6bjs2QrFaJGz5/SUsLqktiwsUTF55Jfv3qYSDhgCecCxMW52nD2" crossorigin="anonymous"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg&callback=initMap&v=weekly" defer></script>
    <script>
      const churchesAtAllTimes = JSON.parse(document.getElementById("churches").text);
      const churchesByArrivalTime = churchesAtAllTimes.reduce((o, ch) => {
        const t = ch['departure_time'];
        if (!o[t]) o[t] = [];
        o[t].push(ch)
        return o;
      }, {});
      let churches = null;
      let churchesById = null;

      function chooseArrivalTime(t) {
        churches = churchesByArrivalTime[t];
        console.log("churches for " + t, churches);
        churchesById = churches.reduce((o, ch) => { o[ch.id] = ch; return o }, {});
      }

      function chooseInitialArrivalTime() {
        // Take the first Sunday morning we find, or else the first of all:
        for (const t of Object.keys(churchesByArrivalTime)) {
          const t2 = new Date(Date.parse(t));
          if (t2.getDay() === 0) return t;
        }
        return Object.keys(churchesByArrivalTime)[0];
      }

      function fillInArrivalTimeChooser() {
        const chooser = document.getElementById("arrivalTime");
        const options = [];
        const format = new Intl.DateTimeFormat('default', {'weekday': 'short', 'hour': 'numeric', 'minute': 'numeric'});
        for (const t of Object.keys(churchesByArrivalTime).sort(t => new Date(Date.parse(t)))) {
          options.push("<option value='" + t + "'>" + format.format(new Date(Date.parse(t))) + "</option>");
        }
        chooser.innerHTML = options.join("\n");
      }

      fillInArrivalTimeChooser();
      // Start out with Sunday morning:
      chooseArrivalTime(chooseInitialArrivalTime());

      function onChooseArrivalTime() {
        console.log("onChooseArrivalTime");
        const chooser = document.getElementById("arrivalTime");
        chooseArrivalTime(chooser.value);
        drawTable();
      }


      function nameAndAddress(ch) {
        return [ch.name, ch.address].filter(x => x).join("\n")
      }

      function asCurrency(x) {
        if (x) {
          return '$' + x.toLocaleString();
        } else {
          return '';
        }
      }

      function addJitter(lonlat) {
        const factor = 0.00001;
        return {
          lng: lonlat.lng * (1 + (Math.random() - 0.5) * factor),
          lat: lonlat.lat * (1 + (Math.random() - 0.5) * factor),
        }
      }

      function pluralize(n, singular, plural) {
        if (!plural) plural = singular + "s";
        if (n == 1) return n + " " + singular;
        else return n + " " + plural;
      }

      function highlightRow(ch) {
        const tbody = document.getElementById("churches-tbody");
        tbody.querySelectorAll("tr").forEach(tr => { tr.classList.remove("text-bg-primary"); });
        const tr = document.getElementById("church-" + ch.id);
        tr.classList.add("text-bg-primary");
      }

      function toMinutes(secs) {
        return Math.round(secs / 60).toString();
      }

      function infoWindowContent(ch) {
        return "<h6>" + nameAndAddress(ch).replaceAll("\n", "<br>") + "</h6>" +
              "<table class='table'>" +
                "<tr>" +
                  "<th>Mean drive</th>" +
                  "<td class='text-end'>" + toMinutes(ch.mean_seconds) + "</td>" +
                "</tr><tr>" +
                  "<th>50/90/95% drive</th>" +
                  "<td class='text-end'>" +
                    toMinutes(ch.seconds_percents[0]) + "/" +
                    toMinutes(ch.seconds_percents[1]) + "/" +
                    toMinutes(ch.seconds_percents[2]) +
                  "</td>" +
                "</tr><tr>" +
                  "<th>Mean change</th>" +
                  "<td class='text-end'>" + toMinutes(ch.mean_delta_seconds) + "</td>" +
                "</tr><tr>" +
                  "<th>50/90/95% change</th>" +
                  "<td class='text-end'>" +
                    toMinutes(ch.delta_seconds_percents[0]) + "/" +
                    toMinutes(ch.delta_seconds_percents[1]) + "/" +
                    toMinutes(ch.delta_seconds_percents[2]) +
                  "</td>" +
                "</tr>" +
              "</table>" +
              "<div class='text-muted'>* All times in minutes</div>";
      }

      function onClickRow(event) {
        console.log("We got clicked!", event);
        const tr = event.target.closest('tr');
        const churchId = parseInt(tr.id.substring(7));    // cut off the prefix of "church-12"
        const ch = churchesById[churchId];
        showPopup(ch);
      }

      function drawTable() {
        const tbody = document.getElementById("churches-tbody");
        let trs = '';
        for (const ch of churches.sort((a, b) => (b.current - a.current) || (a.seconds_percents[0] - b.seconds_percents[0]))) {
          trs += (
            "<tr id='church-" + ch.id + "'>" +
              "<td><a style='cursor:pointer' onclick='onClickRow(event)'>" + nameAndAddress(ch).replaceAll("\n", "<br>") + "</a></td>" +
              "<td class='text-end'>" + toMinutes(ch.mean_seconds) + "</td>" +
              "<td class='text-end'>" + toMinutes(ch.seconds_percents[0]) + "</td>" +
              "<td class='text-end'>" + toMinutes(ch.seconds_percents[1]) + "</td>" +
              "<td class='text-end'>" + toMinutes(ch.seconds_percents[2]) + "</td>" +
              "<td class='text-end'>" + toMinutes(ch.mean_delta_seconds) + "</td>" +
              "<td class='text-end'>" + toMinutes(ch.delta_seconds_percents[0]) + "</td>" +
              "<td class='text-end'>" + toMinutes(ch.delta_seconds_percents[1]) + "</td>" +
              "<td class='text-end'>" + toMinutes(ch.delta_seconds_percents[2]) + "</td>" +
              "<td class='text-end'>" + (ch.size || '') + "</td>" +
              "<td class='text-end'>" + asCurrency(ch.price) + "</td>" +
            "</tr>");
        }
        tbody.innerHTML = trs;
      }
      drawTable();

      let map = null;
      let infoWindow = null;
      const stJohns = { lng: -122.82605, lat: 45.51339 };

      function showPopup(ch) {
        highlightRow(ch);
        infoWindow.setContent(infoWindowContent(ch));
        infoWindow.open({
          anchor: ch.marker,
          map,
          shouldFocus: false,
        });
      }

      function initMap() {
        map = new google.maps.Map(document.getElementById("map"), {
          zoom: 10,
          center: stJohns,
        });
        infoWindow = new google.maps.InfoWindow({
          content: "",
        });
        for (const ch of churches) {
          ch.marker = new google.maps.Marker({
            // TODO: Instead of adding jitter,
            // detect multiple pins at the same place and space out only those
            // (around a small radius).
            position: addJitter({ lng: ch.longitude, lat: ch.latitude }),
            map: map,
            title: nameAndAddress(ch),
          });
          ch.marker.addListener("click", () => { showPopup(ch) });
        }
      }
      window.initMap = initMap;
    </script>
  </body>
</html>

